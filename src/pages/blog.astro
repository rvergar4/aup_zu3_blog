---
import { getCollection } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import BlogPost from "../components/BlogPost.astro";
import { basePath } from "../config";

const pageTitle = "Field Notes on FPGA Learning";

//get all posts
const allPosts = await getCollection("blog");
//filter out drafts
const publishedPosts = allPosts.filter(post => !post.data.draft);

//sort post by date (oldest to newest)
const sortedPosts = publishedPosts.sort((a, b) =>
  a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
);

//define boards
const boards = [
  {id: 'aup-zu3', label: 'AUP-ZU3', message: "The AUP-ZU3 has a lot to explore! Let's get started"},
  {id: 'otherboard', label: 'Other Board'},
  //add new boards here
];

//group by difficulty
function groupByDifficulty(posts) {
  const groups = {
    Beginner: [],
    "Simple Projects": [],
    Intermediate: [],
    Advanced: []
  };

  posts.forEach(post => {
    //getting tags array
    const tags = post.data.tags || [];
    //noramalizng for comparison
    const normalizedTags = tags.map(t => t.toLowerCase());
    //match the category
    if (normalizedTags.includes("beginner")) {
      groups.Beginner.push(post);
    }else if (normalizedTags.includes("simple projects")) {
      groups["Simple Projects"].push(post);
    } else if (normalizedTags.includes("intermediate")) {
      groups.Intermediate.push(post);
    } else if (normalizedTags.includes("advanced")) {
      groups.Advanced.push(post);
    }
  });
  return groups;
}

//filter and group posts
const groupedBoards = boards.map(board => {
  //filter by board directory
  const postsForBoard = sortedPosts.filter(post => post.id.startsWith(`${board.id}/`));
  return { ...board, groupedPosts: groupByDifficulty(postsForBoard) };
});
---

<BaseLayout pageTitle={pageTitle}>
  <h2>Thereâ€™s always more to uncover.</h2>


  <div class="stack-tabs">
    <!-- Inputs must come first -->
   {groupedBoards.map((board, i) => (
      <input type="radio" name="tab" id={`tab${i + 1}`} hidden checked={i === 0} />
    ))}

    <!-- Then the labels -->
    <div class="tab-labels">
      {groupedBoards.map((board, i) => (
        <label for={`tab${i + 1}`}>{board.label}</label>
      ))}
    </div>

    <!-- Then the panels -->
    <div class="card-panels">
      {groupedBoards.map((board, i) => (
        <section id={`card${i + 1}`}>
          <div class="index-card">
            <span class="index-card-label">{board.label} Blog</span>
            <p>{board.message || "Explore this board!"}</p>

            {Object.entries(board.groupedPosts).map(([difficulty, posts]) =>
              posts.length > 0 && (
                <>
                  <h3>{difficulty}</h3>
                  <ul>
                    {posts.map((post) => (
                      <BlogPost
                        url={`${basePath}posts/${post.id}/`}
                        title={post.data.title}
                      />
                    ))}
                  </ul>
                </>
              )
            )}
          </div>
        </section>
      ))}
    </div>
  </div>
</BaseLayout>